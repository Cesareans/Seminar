@Cesare
${KlassStudentMapper}
    /**
     * Select a Team's all students via teamId
     *
     * @author Cesare
     * @param teamId the select gist
     * @return List<Student> the selected Team's all students as list
     */
    @Select("select student.id,student_name,account,password,email,is_active from klass_student left join student on klass_student.student_id = student.id where team_id=#{teamId}")
    @Results({
            @Result(property = "id", column = "id", id = true),
            @Result(property = "studentName", column = "student_name"),
            @Result(property = "studentNum", column = "student_num"),
            @Result(property = "password", column = "password"),
            @Result(property = "email", column = "email"),
            @Result(property = "activated", column = "is_active")
    })
    List<Student> selectStudentsByTeamId(String teamId);

    /**
     * Select all not teamed students in a course via course id
     *
     * @author Cesare
     * @param courseId the select gist
     * @return List<Student> the not teamed students in the course
     */
    @Select("select student.id,student_name,account,password,email,is_active from klass_student left join student on klass_student.student_id = student.id where course_id=#{courseId} and team_id = 0")
    @Results({
            @Result(property = "id", column = "id", id = true),
            @Result(property = "studentName", column = "student_name"),
            @Result(property = "studentNum", column = "student_num"),
            @Result(property = "password", column = "password"),
            @Result(property = "email", column = "email"),
            @Result(property = "activated", column = "is_active")
    })
    List<Student> selectNotTeamedStudentsByCourseId(String courseId);
${CourseMapper}
    /**
     * Get a course's other course via course id
     *
     * @param id the select gist
     * @param teamMainCourseId the select gist
     * @param seminarMainCourseId the  select gist
     * @return List<course> the selected Course's other courses as list
     */
    @Select("select * from course where id != #{id} and (#{tmId} is null or id!=#{tmId}) and (#{smId} is null or id!=#{smId}) and (team_main_course_id is null or seminar_main_course_id is null)")
    @Results({
            @Result(property = "id", column = "id", id = true),
            @Result(property = "courseName", column = "course_name"),
            @Result(property = "introduction", column = "introduction"),
            @Result(property = "prePercentage", column = "presentation_percentage"),
            @Result(property = "reportPercentage", column = "report_percentage"),
            @Result(property = "quesPercentage", column = "question_percentage"),
            @Result(property = "teamStartDate", column = "team_start_time"),
            @Result(property = "teamEndDate", column = "team_end_time"),
            @Result(property = "teacherId", column = "teacher_id"),
            @Result(property = "teamMainCourseId", column = "team_main_course_id"),
            @Result(property = "seminarMainCourseId", column = "seminar_main_course_id")
    })
    List<Course> selectOtherCoursesById(@Param("id")String id, @Param("tmId")String teamMainCourseId, @Param("smId")String seminarMainCourseId);

${RoundMapper}
    /**
     * Insert a new Round into a course.
     * Only the courseId is used.
     *
     * @param round the wanted round
     */
    @Insert("insert into round(round_serial, course_id, presentation_score_method, report_score_method, question_score_method) select max(round_serial) + 1,course_id, 0, 0, 0 from round where course_id = #{courseId}")
    @Options(useGeneratedKeys = true)
    void addRound(Round round);

${SeminarMapper}
    /**
     * Get the max seminar serial of a course
     * @param courseId the refer gist
     * @return the max seminar serial
     */
    @Select("select max(seminar_serial) from seminar where course_id = #{courseId}")
    int selectMaxSerialOfCourse(String courseId);